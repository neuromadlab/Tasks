%%===================VAS horizontal===================
% customized visual analogue scales (0-100)
% Answer with Joystick (USB Xbox-360 Controller)
%
% Modified by Monja Neuser
% to be used in effort allocation task
% Coded by: Nils Kroemer modified from mood_VAS (coded by Ying Lee) and BDM task (coded by Jean Liu)

% This Version: Projectversion for TUE007, July 2021, Corinna Schulz
% includes questions about caloric load

% Update coded with: Matlab R2014a using Psychtoolbox 3.0.11
%========================================================

ScreenType = 1; %Set 1 for For LG Screen in testing room 225
                %Set 0 for previous settings

% Define colors
color.white = WhiteIndex(setup.screenNum); %with intensity value for white on second screen
color.grey = color.white / 2;
color.black = BlackIndex(setup.screenNum);
color.red = [255 0 0];
color.scale_anchors = color.black;

%% Start rating:
feedback_delay = 0.2; % specifies the duration that the confirmed rating will be displayed on the screen
%Experiment
max_dur_rating = VAS_rating_duration;
%VAS_time_limit = 1; %set 0 für state ratings, 1 for experiment
wait_rest = 0;

% Fixation cross
[Joystick.X, Joystick.Y, Joystick.Z, Joystick.Button] = WinJoystickMex(JoystickSpecification.Handle);
x_mid = JoystickSpecification.Max / 2;

loop_start = GetSecs;
while (Joystick.X < x_mid * 0.85) || (Joystick.X > x_mid * 1.15)
   
    fix_color = color.red;
    
    fix = ['+'];
    Screen('TextSize',w,64);
    Screen('TextFont',w,'Arial');
    [pos.text.x,pos.text.y,pos.text.bbox] = DrawFormattedText(w, fix, 'center', 'center', fix_color,80);
    time.fix = Screen('Flip', w);
    
    [Joystick.X, Joystick.Y, Joystick.Z, Joystick.Button] = WinJoystickMex(JoystickSpecification.Handle);

end
loop_duration = GetSecs - loop_start;
wait_rest = wait_rest - loop_duration;

fix_color = color.black;

fix = ['+'];
Screen('TextSize',w,64);
Screen('TextFont',w,'Arial');
[pos.text.x,pos.text.y,pos.text.bbox] = DrawFormattedText(w, fix, 'center', 'center', fix_color,80);
time.fix = Screen('Flip', w);

WaitSecs(waiting_duration);


% ---- Start trial --------------------------------------------------------
t_scale_trigger = GetSecs;

%--- Prepare off-screen windows---

%rating window (4s)
rating_scr = Screen('OpenOffscreenwindow',w,color.white);
text_freerating = [trial.question]; %free rating

Screen('TextSize',effort_scr,14);
Screen('TextFont',effort_scr,'Arial');

%%Questions: Scale anchors depending on State or Caloric Items
if  strcmp(trial.type,'Caloric_wanting')
    text_question = ['Wie sehr wollen Sie das Getränk jetzt gerade erhalten?'];
    scale.anchor_1 = ['Überhaupt nicht'];
    scale.anchor_7 = ['Sehr stark'];
    
    
elseif  strcmp(trial.type,'Caloric_liking')
    text_question = ['Bitte bewerten Sie das Getränk jetzt gerade im Vergleich zu allen bisher in Ihrem Leben erfahrenen Empfindungen.'];
    scale.a7 = ['am allerstaerksten gemochte \n Empfindung, die vorstellbar ist'];
    scale.a1 = ['am allerstaerksten zuwidere \n Empfindung, die vorstellbar ist'];
    
    
else % State questions
    text_question = ['Wie ' trial.question  ' fühlen Sie sich im Moment?'];
    scale.anchor_1 = ['Überhaupt nicht'];
    scale.anchor_7 = ['Sehr stark'];
end

%rescale wh to scale_height
Scale_width = round(setup.ScrWidth * .50);
%Scale_width = round(ww * .75);
Scale_offset = round((setup.ScrHeight - (setup.ScrHeight * .95)) * .75);
%Scale_offset = round((wh - (wh * .95)) * .75);

DrawFormattedText(rating_scr, text_question, 'center', (Scale_offset+setup.ScrHeight/2 - 150), color.scale_anchors,40,[],[],2);

    %Different scale labels for Caloric & State Questions
    if strcmp(trial.type,'Caloric_liking')
        DrawFormattedText(rating_scr, [scale.a1], (setup.ScrWidth/2-Scale_width/2 - 65), (Scale_offset+setup.ScrHeight/2 + 40), color.scale_anchors,80);
        %DrawFormattedText(rating_scr, [scale.a3], (setup.ScrWidth/2-Scale_width/2 - 55), (Scale_offset+setup.ScrHeight/2 + 40), color.scale_anchors,80);
        %DrawFormattedText(rating_scr, [scale.a5], (setup.ScrWidth/2-Scale_width/2 - 40), (Scale_offset+setup.ScrHeight/2 + 40), color.scale_anchors,80);
        DrawFormattedText(rating_scr, [scale.a7], (setup.ScrWidth/2+Scale_width/2 - 35), (Scale_offset+setup.ScrHeight/2 + 40), color.scale_anchors,80);
    else
        DrawFormattedText(rating_scr, [scale.anchor_1], (setup.ScrWidth/2-Scale_width/2 - 65), (Scale_offset+setup.ScrHeight/2 + 40), color.scale_anchors,80);
        DrawFormattedText(rating_scr, [scale.anchor_7], (setup.ScrWidth/2+Scale_width/2 - 35), (Scale_offset+setup.ScrHeight/2 + 40), color.scale_anchors,80);
    end
    
    % horizontal scale element
    Screen('DrawLine',rating_scr,color.scale_anchors,(setup.ScrWidth/2-Scale_width/2), (Scale_offset+setup.ScrHeight/2), (setup.ScrWidth/2+Scale_width/2), (Scale_offset+setup.ScrHeight/2),3)
  
    % vertical scale elements
    Screen('DrawLine',rating_scr,color.scale_anchors,(setup.ScrWidth/2-Scale_width/2), (Scale_offset+setup.ScrHeight/2 - 20), (setup.ScrWidth/2-Scale_width/2), (Scale_offset+setup.ScrHeight/2 + 20),3)
    %Screen('DrawLine',rating_scr,[250 250 250],(ww/2), (Scale_offset+wh/2 - 15), (ww/2), (Scale_offset+wh/2 + 15),3)
    Screen('DrawLine',rating_scr,color.scale_anchors,(setup.ScrWidth/2+Scale_width/2), (Scale_offset+setup.ScrHeight/2 - 20), (setup.ScrWidth/2+Scale_width/2), (Scale_offset+setup.ScrHeight/2 + 20),3)
    
    %--- Start display for trial---
    
    %rating window
    Screen('CopyWindow',rating_scr,w);
    Screen('Flip',w);
    

    %----Mouse response----
    
    %Move cursor to mean position
    X = round(setup.ScrWidth/2);
    Y = round(Scale_offset + setup.ScrHeight/2); %Fix y coordinate
    Slider_x_pos = X;
    %SetMouse(X,Y);
    %scale_joy_x = ww*1.1/JoystickSpecification.Max;
    %scale_joy_y = wh*1.1/JoystickSpecification.Max;
    scale_joy_x = setup.ScrWidth*0.7/JoystickSpecification.Max;
    scale_joy_y = setup.ScrHeight*0.7/JoystickSpecification.Max;
    
    %Put slider on the screen
    Screen('CopyWindow',rating_scr,w)
    
    Screen('DrawLine',w,[250 0 0], Slider_x_pos, Y-10, Slider_x_pos, Y+ 10, 5)
                
    Screen('Flip',w);
    
    %Loop and track mouse such that rating slider moves according to mouse position (edited from MouseTraceDemo)
    sampleTime = 0.01;
    startTime = GetSecs;
    nextTime = startTime+sampleTime;
    flag_resp = 0;
    
    output.timestamps.trial_start(i_state) = startTime; %Time run starts

    %[mouseX, mouseY, mousebuttons] = GetMouse(screenNumber); %Find out coordinates of current mouse position
    [Joystick.X, Joystick.Y, Joystick.Z, Joystick.Button] = WinJoystickMex(JoystickSpecification);
    offset_x = X - round(Joystick.X * scale_joy_x);
    proj_x = round(Joystick.X * scale_joy_x) + offset_x;
    
    while (GetSecs - t_scale_trigger) < max_dur_rating && flag_resp == 0 %mousebuttons(1)~=1 
        
        if (GetSecs > nextTime) %Sample every 0.01 seconds
            %[mouseX, mouseY, mousebuttons] = GetMouse(screenNumber); %Find out coordinates of current mouse position
            [Joystick.X, Joystick.Y, Joystick.Z, Joystick.Button] = WinJoystickMex(JoystickSpecification);
            proj_x = round(Joystick.X * scale_joy_x) + offset_x;
            
            if Joystick.Button(1) == 1
                flag_resp = 1;
                t_button = GetSecs;
                output.timestamps.trial_response(i_state) = t_button; %Time run starts

            end
                   
            if flag_resp==1 %Terminate and record rating on left mouseclick
                
                t_rating_ref = t_button - startTime;
                
                rating = ((Slider_x_pos - (setup.ScrWidth/2-Scale_width/2))/ Scale_width)*100; %rescaling of scale_width independent of screen resolution [0-100]
                rating_label = text_freerating;
                rating_subm = 1;
                
                
            elseif (proj_x ~= Slider_x_pos) %Update screen if participant has scrolled up or down
                Screen('CopyWindow',rating_scr,w);
                Slider_x_pos = (proj_x);
                
                %restrict range of slider to defined scale
                if Slider_x_pos < (setup.ScrWidth/2 - Scale_width/2)
                    Slider_x_pos = (setup.ScrWidth/2 - Scale_width/2);
                elseif Slider_x_pos > (setup.ScrWidth/2 + Scale_width/2)
                    Slider_x_pos = (setup.ScrWidth/2 + Scale_width/2);
                end
                
                Screen('DrawLine',w,[250 0 0],Slider_x_pos, Y - 10, Slider_x_pos, Y + 10,5)
                
                Screen('Flip',w);
            end
            nextTime = nextTime+sampleTime;
        end
    end
    
     if flag_resp==0 %Terminate without click
                    
            rating = ((Slider_x_pos - (setup.ScrWidth/2-Scale_width/2))/ Scale_width)*100; %rescaling of scale_width independent of screen resolution [0-100]
            rating_label = text_freerating;
            rating_subm = 0;
       
            t_rating_ref = GetSecs - startTime;
     end
     wait_rest = max_dur_rating - t_rating_ref;
     WaitSecs(feedback_delay); %Show screen for 1s post-mouseclick
     
%end
